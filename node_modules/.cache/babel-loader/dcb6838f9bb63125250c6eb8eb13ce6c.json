{"ast":null,"code":"// Created by mauricio on 5/14/15.\n'use strict';\n\nvar utils = require('./utils'); // boost/numeric/interval_lib/compare/certain package on boost\n\n/**\n * @mixin relational\n */\n\n\nvar relational = {};\n/**\n * Checks if the intervals `x`, `y` are equal, they're equal when\n * `x.lo === y.lo` and `x.hi === y.hi`, a corner case handled is when `x` and\n * `y` are both empty intervals\n * @example\n * Interval.equal(\n *   Interval(2, 3),\n *   Interval(2, 3)\n * ) // true\n * @example\n * Interval.equal(\n *   Interval.EMPTY,\n *   Interval.EMPTY\n * ) // true\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\n\nrelational.equal = function (x, y) {\n  if (utils.isEmpty(x)) {\n    return utils.isEmpty(y);\n  }\n\n  return !utils.isEmpty(y) && x.lo === y.lo && x.hi === y.hi;\n}; // <debug>\n\n\nvar EPS = 1e-7;\n\nfunction assert(a, message) {\n  /* istanbul ignore next */\n  if (!a) {\n    throw new Error(message || 'assertion failed');\n  }\n}\n\nfunction assertEps(a, b) {\n  if (!isFinite(a)) {\n    return assert(a === b, '[Infinity] expected ' + a + ' to be ' + b);\n  }\n\n  assert(Math.abs(a - b) < EPS, 'expected ' + a + ' to be close to ' + b);\n}\n\nrelational.almostEqual = function (x, y) {\n  x = Array.isArray(x) ? x : x.toArray();\n  y = Array.isArray(y) ? y : y.toArray();\n  assertEps(x[0], y[0]);\n  assertEps(x[1], y[1]);\n};\n\nrelational.assertIncludes = function (x, y) {\n  // checks that `y` is included in `x` with the bounds close to `x`\n  relational.almostEqual(x, y);\n  x = Array.isArray(x) ? x : x.toArray();\n  y = Array.isArray(y) ? y : y.toArray();\n  assert(x[0] <= y[0], x[0] + ' should be less/equal than ' + y[0]);\n  assert(y[1] <= x[1], y[1] + ' should be less/equal than ' + x[1]);\n}; // </debug>\n\n/**\n * Checks if the intervals `x`, `y` are not equal i.e. when the intervals don't\n * share any value\n * @example\n * Interval.notEqual(\n *   Interval(2, 3),\n *   Interval(4, 5)\n * ) // true\n * @example\n * Interval.notEqual(\n *   Interval(2, 3),\n *   Interval(3, 5)\n * ) // false\n * @example\n * Interval.notEqual(\n *   Interval(2, 4),\n *   Interval(3, 5)\n * ) // false\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\n\n\nrelational.notEqual = function (x, y) {\n  if (utils.isEmpty(x)) {\n    return !utils.isEmpty(y);\n  }\n\n  return utils.isEmpty(y) || x.hi < y.lo || x.lo > y.hi;\n};\n/**\n * Checks if the interval `x` is less than `y` i.e. if all the values of `x`\n * are lower than the left endpoint of `y`\n * @example\n * Interval.lessThan(\n *   Interval(2, 3),\n *   Interval(4, 5)\n * ) // true\n * @example\n * Interval.lessThan(\n *   Interval(4, 5),\n *   Interval(2, 3)\n * ) // false\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\n\n\nrelational.lessThan = function (x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false;\n  }\n\n  return x.hi < y.lo;\n};\n/**\n * Alias for {@link relational.lessThan}\n * @function\n */\n\n\nrelational.lt = relational.lessThan;\n/**\n * Checks if the interval `x` is greater than `y` i.e. if all the values of `x`\n * are greater than the right endpoint of `y`\n * @example\n * Interval.greaterThan(\n *   Interval(2, 3),\n *   Interval(4, 5)\n * ) // false\n * @example\n * Interval.greaterThan(\n *   Interval(4, 5),\n *   Interval(2, 3)\n * ) // true\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\n\nrelational.greaterThan = function (x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false;\n  }\n\n  return x.lo > y.hi;\n};\n/**\n * Alias for {@link relational.greaterThan}\n * @function\n */\n\n\nrelational.gt = relational.greaterThan;\n/**\n * Checks if the interval `x` is less or equal than `y` i.e.\n * if all the values of `x` are lower or equal to the left endpoint of `y`\n * @example\n * Interval.lessEqualThan(\n *   Interval(2, 3),\n *   Interval(3, 5)\n * ) // true\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\n\nrelational.lessEqualThan = function (x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false;\n  }\n\n  return x.hi <= y.lo;\n};\n/**\n * Alias for {@link relational.lessEqualThan}\n * @function\n */\n\n\nrelational.leq = relational.lessEqualThan;\n/**\n * Checks if the interval `x` is greater or equal than `y` i.e.\n * if all the values of `x` are greater or equal to the right endpoint of `y`\n * @param {Interval} x\n * @param {Interval} y\n * @return {boolean}\n */\n\nrelational.greaterEqualThan = function (x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return false;\n  }\n\n  return x.lo >= y.hi;\n};\n/**\n * Alias for {@link relational.greaterEqualThan}\n * @function\n */\n\n\nrelational.geq = relational.greaterEqualThan;\nmodule.exports = relational;","map":null,"metadata":{},"sourceType":"script"}