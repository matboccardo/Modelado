{"ast":null,"code":"/**\n * Created by mauricio on 3/29/15.\n */\n'use strict';\n\nvar d3 = window.d3;\n\nvar extend = require('extend');\n\nvar builtInEvaluator = require('./eval').builtIn;\n\nvar datumDefaults = require('../datum-defaults');\n\nvar polyline = require('../graph-types/polyline');\n\nmodule.exports = function (chart) {\n  var secantDefaults = datumDefaults({\n    isHelper: true,\n    skipTip: true,\n    skipBoundsCheck: true,\n    nSamples: 2,\n    graphType: 'polyline'\n  });\n  var secant;\n\n  function computeSlope(scope) {\n    scope.m = (scope.y1 - scope.y0) / (scope.x1 - scope.x0);\n  }\n\n  function updateLine(d, secant) {\n    if (!secant.hasOwnProperty('x0')) {\n      throw Error('secant must have the property `x0` defined');\n    }\n\n    secant.scope = secant.scope || {};\n    var x0 = secant.x0;\n    var x1 = typeof secant.x1 === 'number' ? secant.x1 : Infinity;\n    extend(secant.scope, {\n      x0: x0,\n      x1: x1,\n      y0: builtInEvaluator(d, 'fn', {\n        x: x0\n      }),\n      y1: builtInEvaluator(d, 'fn', {\n        x: x1\n      })\n    });\n    computeSlope(secant.scope);\n  }\n\n  function setFn(d, secant) {\n    updateLine(d, secant);\n    secant.fn = 'm * (x - x0) + y0';\n  }\n\n  function setMouseListener(d, secantObject) {\n    var self = this;\n\n    if (secantObject.updateOnMouseMove && !secantObject.$$mouseListener) {\n      secantObject.$$mouseListener = function (x1) {\n        secantObject.x1 = x1;\n        updateLine(d, secantObject);\n        secant(self);\n      };\n\n      chart.on('tip:update', secantObject.$$mouseListener);\n    }\n  }\n\n  function computeLines(d) {\n    var self = this;\n    var data = [];\n    d.secants = d.secants || [];\n\n    for (var i = 0; i < d.secants.length; i += 1) {\n      var secant = d.secants[i] = extend({}, secantDefaults, d.secants[i]); // necessary to make the secant have the same color as d\n\n      secant.index = d.index;\n\n      if (!secant.fn) {\n        setFn.call(self, d, secant);\n        setMouseListener.call(self, d, secant);\n      }\n\n      data.push(secant);\n    }\n\n    return data;\n  }\n\n  secant = function (selection) {\n    selection.each(function (d) {\n      var el = d3.select(this);\n      var data = computeLines.call(selection, d);\n      var innerSelection = el.selectAll('g.secant').data(data);\n      innerSelection.enter().append('g').attr('class', 'secant'); // enter + update\n\n      innerSelection.call(polyline(chart)); // change the opacity of the secants\n\n      innerSelection.selectAll('path').attr('opacity', 0.5); // exit\n\n      innerSelection.exit().remove();\n    });\n  };\n\n  return secant;\n};","map":null,"metadata":{},"sourceType":"script"}