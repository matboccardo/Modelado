{"ast":null,"code":"/**\n * Created by mauricio on 5/10/15.\n */\n'use strict';\n\nvar Interval = require('../interval');\n\nvar rmath = require('../round-math');\n\nvar utils = require('./utils');\n\nvar constants = require('../constants');\n\nvar division = {\n  /**\n   * Division between intervals when `y` doesn't contain zero\n   * @param {Interval} x\n   * @param {Interval} y\n   * @returns {Interval}\n   */\n  nonZero: function (x, y) {\n    var xl = x.lo;\n    var xh = x.hi;\n    var yl = y.lo;\n    var yh = y.hi;\n    var out = Interval();\n\n    if (xh < 0) {\n      if (yh < 0) {\n        out.lo = rmath.divLo(xh, yl);\n        out.hi = rmath.divHi(xl, yh);\n      } else {\n        out.lo = rmath.divLo(xl, yl);\n        out.hi = rmath.divHi(xh, yh);\n      }\n    } else if (xl < 0) {\n      if (yh < 0) {\n        out.lo = rmath.divLo(xh, yh);\n        out.hi = rmath.divHi(xl, yh);\n      } else {\n        out.lo = rmath.divLo(xl, yl);\n        out.hi = rmath.divHi(xh, yl);\n      }\n    } else {\n      if (yh < 0) {\n        out.lo = rmath.divLo(xh, yh);\n        out.hi = rmath.divHi(xl, yl);\n      } else {\n        out.lo = rmath.divLo(xl, yh);\n        out.hi = rmath.divHi(xh, yl);\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Division between an interval and a positive constant\n   * @param {Interval} x\n   * @param {number} v\n   * @returns {Interval}\n   */\n  positive: function (x, v) {\n    if (x.lo === 0 && x.hi === 0) {\n      return x;\n    }\n\n    if (utils.zeroIn(x)) {\n      // mixed considering zero in both ends\n      return constants.WHOLE;\n    }\n\n    if (x.hi < 0) {\n      // negative / v\n      return Interval(Number.NEGATIVE_INFINITY, rmath.divHi(x.hi, v));\n    } else {\n      // positive / v\n      return Interval(rmath.divLo(x.lo, v), Number.POSITIVE_INFINITY);\n    }\n  },\n\n  /**\n   * Division between an interval and a negative constant\n   * @param {Interval} x\n   * @param {number} v\n   * @returns {Interval}\n   */\n  negative: function (x, v) {\n    if (x.lo === 0 && x.hi === 0) {\n      return x;\n    }\n\n    if (utils.zeroIn(x)) {\n      // mixed considering zero in both ends\n      return constants.WHOLE;\n    }\n\n    if (x.hi < 0) {\n      // negative / v\n      return Interval(rmath.divLo(x.hi, v), Number.POSITIVE_INFINITY);\n    } else {\n      // positive / v\n      return Interval(Number.NEGATIVE_INFINITY, rmath.divHi(x.lo, v));\n    }\n  },\n\n  /**\n   * Division between an interval and zero\n   * @param {Interval} x\n   * @returns {Interval}\n   */\n  zero: function (x) {\n    if (x.lo === 0 && x.hi === 0) {\n      return x;\n    }\n\n    return constants.WHOLE;\n  }\n};\nmodule.exports = division;","map":null,"metadata":{},"sourceType":"script"}