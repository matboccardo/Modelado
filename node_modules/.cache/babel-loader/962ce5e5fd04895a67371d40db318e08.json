{"ast":null,"code":"// Created by mauricio on 5/10/15.\n'use strict';\n\nvar Interval = require('../interval');\n\nvar rmath = require('../round-math');\n\nvar utils = require('./utils');\n\nvar constants = require('../constants');\n\nvar division = require('./division');\n/**\n * @mixin arithmetic\n */\n\n\nvar arithmetic = {};\n/**\n * Adds two intervals\n * @example\n * Interval.add(\n *   Interval(0, 1),\n *   Interval(1, 2),\n * )   // Interval(prev(1), next(3))\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\n\narithmetic.add = function (x, y) {\n  return Interval(rmath.addLo(x.lo, y.lo), rmath.addHi(x.hi, y.hi));\n};\n/**\n * Subtracts two intervals\n * @example\n * Interval.subtract(\n *   Interval(0, 1),\n *   Interval(1, 2),\n * )   // Interval(prev(-2), next(0))\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\n\n\narithmetic.subtract = function (x, y) {\n  return Interval(rmath.subLo(x.lo, y.hi), rmath.subHi(x.hi, y.lo));\n};\n/**\n * Alias for {@link arithmetic.subtract}\n * @function\n */\n\n\narithmetic.sub = arithmetic.subtract;\n/**\n * Multiplies two intervals, an explanation of all the possible cases ca\n * be found on [Interval Arithmetic: from Principles to Implementation - T. Hickey, Q. Ju, M.H. van Emden](http://fab.cba.mit.edu/classes/S62.12/docs/Hickey_interval.pdf)\n * @example\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(2, 3)\n * ) // Interval(prev(2), next(6))\n * @example\n * Interval.multiply(\n *  Interval(1, Infinity),\n *  Interval(4, 6)\n * ) // Interval(prev(4), Infinity)\n * @example\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(-3, -2)\n * ) // Interval(prev(-6), next(-2))\n * @example\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(-2, 3)\n * ) // Interval(prev(-4), next(6))\n * @example\n * Interval.multiply(\n *  Interval(-2, -1),\n *  Interval(-3, -2)\n * ) // Interval(prev(2), next(6))\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\n\narithmetic.multiply = function (x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY;\n  }\n\n  var xl = x.lo;\n  var xh = x.hi;\n  var yl = y.lo;\n  var yh = y.hi;\n  var out = Interval();\n\n  if (xl < 0) {\n    if (xh > 0) {\n      if (yl < 0) {\n        if (yh > 0) {\n          // mixed * mixed\n          out.lo = Math.min(rmath.mulLo(xl, yh), rmath.mulLo(xh, yl));\n          out.hi = Math.max(rmath.mulHi(xl, yl), rmath.mulHi(xh, yh));\n        } else {\n          // mixed * negative\n          out.lo = rmath.mulLo(xh, yl);\n          out.hi = rmath.mulHi(xl, yl);\n        }\n      } else {\n        if (yh > 0) {\n          // mixed * positive\n          out.lo = rmath.mulLo(xl, yh);\n          out.hi = rmath.mulHi(xh, yh);\n        } else {\n          // mixed * zero\n          out.lo = 0;\n          out.hi = 0;\n        }\n      }\n    } else {\n      if (yl < 0) {\n        if (yh > 0) {\n          // negative * mixed\n          out.lo = rmath.mulLo(xl, yh);\n          out.hi = rmath.mulHi(xl, yl);\n        } else {\n          // negative * negative\n          out.lo = rmath.mulLo(xh, yh);\n          out.hi = rmath.mulHi(xl, yl);\n        }\n      } else {\n        if (yh > 0) {\n          // negative * positive\n          out.lo = rmath.mulLo(xl, yh);\n          out.hi = rmath.mulHi(xh, yl);\n        } else {\n          // negative * zero\n          out.lo = 0;\n          out.hi = 0;\n        }\n      }\n    }\n  } else {\n    if (xh > 0) {\n      if (yl < 0) {\n        if (yh > 0) {\n          // positive * mixed\n          out.lo = rmath.mulLo(xh, yl);\n          out.hi = rmath.mulHi(xh, yh);\n        } else {\n          // positive * negative\n          out.lo = rmath.mulLo(xh, yl);\n          out.hi = rmath.mulHi(xl, yh);\n        }\n      } else {\n        if (yh > 0) {\n          // positive * positive\n          out.lo = rmath.mulLo(xl, yl);\n          out.hi = rmath.mulHi(xh, yh);\n        } else {\n          // positive * zero\n          out.lo = 0;\n          out.hi = 0;\n        }\n      }\n    } else {\n      // zero * any other value\n      out.lo = 0;\n      out.hi = 0;\n    }\n  }\n\n  return out;\n};\n/**\n * Alias for {@link arithmetic.multiply}\n * @function\n */\n\n\narithmetic.mul = arithmetic.multiply;\n/**\n * Computes x/y, an explanation of all the possible cases ca\n * be found on [Interval Arithmetic: from Principles to Implementation - T. Hickey, Q. Ju, M.H. van Emden](http://fab.cba.mit.edu/classes/S62.12/docs/Hickey_interval.pdf)\n *\n * NOTE: an extreme case of division might results in multiple\n * intervals, unfortunately this library doesn't support multi-interval\n * arithmetic yet so a single interval will be returned instead with\n * the {@link misc.hull} of the resulting intervals (this is the way\n * Boost implements it too)\n *\n * @example\n * Interval.divide(\n *   Interval(1, 2),\n *   Interval(3, 4)\n * ) // Interval(prev(1/4), next(2/3))\n * @example\n * Interval.divide(\n *   Interval(-2, 1),\n *   Interval(-4, -3)\n * ) // Interval(prev(-1/3), next(2/3))\n * @example\n * Interval.divide(\n *   Interval(1, 2),\n *   Interval(-1, 1)\n * ) // Interval(-Infinity, Infinity)\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\n\narithmetic.divide = function (x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY;\n  }\n\n  if (utils.zeroIn(y)) {\n    if (y.lo !== 0) {\n      if (y.hi !== 0) {\n        return division.zero(x);\n      } else {\n        return division.negative(x, y.lo);\n      }\n    } else {\n      if (y.hi !== 0) {\n        return division.positive(x, y.hi);\n      } else {\n        return constants.EMPTY;\n      }\n    }\n  } else {\n    return division.nonZero(x, y);\n  }\n};\n/**\n * Alias for {@link arithmetic.divide}\n * @function\n */\n\n\narithmetic.div = arithmetic.divide;\n/**\n * Computes +x (identity function)\n * @see misc.clone\n * @example\n * Interval.positive(\n *  Interval(1, 2)\n * )  // Interval(1, 2)\n * @param {Interval} x\n * @return {Interval}\n */\n\narithmetic.positive = function (x) {\n  return Interval(x.lo, x.hi);\n};\n/**\n * Computes -x\n * @example\n * Interval.negative(\n *   Interval(1, 2)\n * )  // Interval(-2, -1)\n * @example\n * Interval.negative(\n *   Interval(-Infinity, Infinity)\n * )  // Interval(-Infinity, Infinity)\n * @example\n * Interval.negative(\n *   Interval.WHOLE\n * )  // Interval.WHOLE\n * @param {Interval} x\n * @return {Interval}\n */\n\n\narithmetic.negative = function (x) {\n  return Interval(-x.hi, -x.lo);\n};\n\nmodule.exports = arithmetic;","map":null,"metadata":{},"sourceType":"script"}