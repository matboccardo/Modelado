{"ast":null,"code":"/**\n * Created by mauricio on 3/29/15.\n */\n'use strict';\n\nvar d3 = window.d3;\n\nvar builtInEvaluator = require('./eval').builtIn;\n\nvar polyline = require('../graph-types/polyline');\n\nvar datumDefaults = require('../datum-defaults');\n\nmodule.exports = function (chart) {\n  var derivativeDatum = datumDefaults({\n    isHelper: true,\n    skipTip: true,\n    skipBoundsCheck: true,\n    nSamples: 2,\n    graphType: 'polyline'\n  });\n  var derivative;\n\n  function computeLine(d) {\n    if (!d.derivative) {\n      return [];\n    }\n\n    var x0 = typeof d.derivative.x0 === 'number' ? d.derivative.x0 : Infinity;\n    derivativeDatum.index = d.index;\n    derivativeDatum.scope = {\n      m: builtInEvaluator(d.derivative, 'fn', {\n        x: x0\n      }),\n      x0: x0,\n      y0: builtInEvaluator(d, 'fn', {\n        x: x0\n      })\n    };\n    derivativeDatum.fn = 'm * (x - x0) + y0';\n    return [derivativeDatum];\n  }\n\n  function checkAutoUpdate(d) {\n    var self = this;\n\n    if (!d.derivative) {\n      return;\n    }\n\n    if (d.derivative.updateOnMouseMove && !d.derivative.$$mouseListener) {\n      d.derivative.$$mouseListener = function (x0) {\n        // update initial value to be the position of the mouse\n        // scope's x0 will be updated on the next call to `derivative(self)`\n        if (d.derivative) {\n          d.derivative.x0 = x0;\n        } // trigger update (selection = self)\n\n\n        derivative(self);\n      }; // if d.derivative is destroyed and recreated, the tip:update event\n      // will be fired on the new d.derivative :)\n\n\n      chart.on('tip:update', d.derivative.$$mouseListener);\n    }\n  }\n\n  derivative = function (selection) {\n    selection.each(function (d) {\n      var el = d3.select(this);\n      var data = computeLine.call(selection, d);\n      checkAutoUpdate.call(selection, d);\n      var innerSelection = el.selectAll('g.derivative').data(data);\n      innerSelection.enter().append('g').attr('class', 'derivative'); // enter + update\n\n      innerSelection.call(polyline(chart)); // update\n      // change the opacity of the line\n\n      innerSelection.selectAll('path').attr('opacity', 0.5);\n      innerSelection.exit().remove();\n    });\n  };\n\n  return derivative;\n};","map":null,"metadata":{},"sourceType":"script"}