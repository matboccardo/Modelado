{"ast":null,"code":"'use strict';\n\nvar SymbolNode = require('mr-parser').nodeTypes.SymbolNode;\n\nvar functionProxy = function (node) {\n  return '$$mathCodegen.functionProxy(' + this.next(new SymbolNode(node.name)) + ', \"' + node.name + '\")';\n};\n\nmodule.exports = function (node) {\n  var self = this; // wrap in a helper function to detect the type of symbol it must be a function\n  // NOTE: if successful the wrapper returns the function itself\n  // NOTE: node.name should be a symbol so that it's correctly represented as a string in SymbolNode\n\n  var method = functionProxy.call(this, node);\n  var args = [];\n  this.rawify(this.options.rawCallExpressionElements, function () {\n    args = node.args.map(function (arg) {\n      return self.next(arg);\n    });\n  });\n  return method + '(' + args.join(', ') + ')';\n};\n\nmodule.exports.functionProxy = functionProxy;","map":null,"metadata":{},"sourceType":"script"}