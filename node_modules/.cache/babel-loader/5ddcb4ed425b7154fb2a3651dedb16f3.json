{"ast":null,"code":"// Created by mauricio on 5/11/15.\n'use strict';\n\nvar Interval = require('./interval');\n\nvar mutate = require('xtend/mutable');\n\nvar piLow = (3373259426.0 + 273688.0 / (1 << 21)) / (1 << 30);\nvar piHigh = (3373259426.0 + 273689.0 / (1 << 21)) / (1 << 30);\n/**\n * @mixin constants\n */\n\nvar constants = {};\nmutate(constants, {\n  /**\n   * Previous IEEE floating point value of PI (equal to Math.PI)\n   * 3.141592653589793\n   * @memberof constants\n   * @type {number}\n   */\n  PI_LOW: piLow,\n\n  /**\n   * Next IEEE floating point value of PI, 3.1415926535897936\n   * @memberof constants\n   * @type {number}\n   */\n  PI_HIGH: piHigh,\n  PI_HALF_LOW: piLow / 2,\n  PI_HALF_HIGH: piHigh / 2,\n  PI_TWICE_LOW: piLow * 2,\n  PI_TWICE_HIGH: piHigh * 2\n});\n\nfunction getter(property, fn) {\n  Object.defineProperty(constants, property, {\n    get: function () {\n      return fn();\n    },\n    enumerable: true\n  });\n}\n/**\n * An interval that represents PI, NOTE: calls to Interval.PI always return\n * a new interval representing PI\n * @memberof constants\n * @static\n * @example\n * Interval(Interval.PI_LOW, Interval.PI_HIGH)\n * @name PI\n * @type {Interval}\n */\n\n\ngetter('PI', function () {\n  return Interval(piLow, piHigh);\n});\n/**\n * An interval that represents PI / 2, NOTE: calls to Interval.PI_HALF always\n * return a new interval representing PI / 2\n * @memberof constants\n * @static\n * @example\n * Interval(Interval.PI_LOW / 2, Interval.PI_HIGH / 2)\n * @name PI_HALF\n * @type {Interval}\n */\n\ngetter('PI_HALF', function () {\n  return Interval(constants.PI_HALF_LOW, constants.PI_HALF_HIGH);\n});\n/**\n * An interval that represents PI * 2, NOTE: calls to Interval.PI_TWICE always\n * return a new interval representing PI * 2\n * @memberof constants\n * @static\n * @example\n * Interval(Interval.PI_LOW * 2, Interval.PI_HIGH * 2)\n * @name PI_TWICE\n * @type {Interval}\n */\n\ngetter('PI_TWICE', function () {\n  return Interval(constants.PI_TWICE_LOW, constants.PI_TWICE_HIGH);\n});\n/**\n * An interval that represents 0, NOTE: calls to Interval.ZERO always\n * return a new interval representing 0\n * @memberof constants\n * @static\n * @example\n * // Interval.ZERO is equivalent to\n * Interval(0)\n * @name ZERO\n * @type {Interval}\n */\n\ngetter('ZERO', function () {\n  return Interval(0);\n});\n/**\n * An interval that represents 1, NOTE: calls to Interval.ONE always\n * return a new interval representing 1\n * @memberof constants\n * @static\n * @example\n * // Interval.ONE is equivalent to\n * Interval(1)\n * @name ONE\n * @type {Interval}\n */\n\ngetter('ONE', function () {\n  return Interval(1);\n});\n/**\n * An interval that represents all the real values\n * NOTE: calls to Interval.WHOLE always return a new interval representing all\n * the real values\n * @memberof constants\n * @static\n * @example\n * // Interval.WHOLE is equivalent to\n * Interval().setWhole()\n * @name WHOLE\n * @type {Interval}\n */\n\ngetter('WHOLE', function () {\n  return Interval().setWhole();\n});\n/**\n * An interval that represents no values\n * NOTE: calls to Interval.EMPTY always return a new interval representing no\n * values\n * @memberof constants\n * @static\n * @example\n * // Interval.EMPTY is equivalent to\n * Interval().setEmpty()\n * @name EMPTY\n * @type {Interval}\n */\n\ngetter('EMPTY', function () {\n  return Interval().setEmpty();\n});\nmodule.exports = constants;","map":null,"metadata":{},"sourceType":"script"}