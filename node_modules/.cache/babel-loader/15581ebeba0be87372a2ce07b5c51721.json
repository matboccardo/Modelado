{"ast":null,"code":"var d3 = window.d3;\n\nvar extend = require('extend');\n\nvar pressed = require('key-pressed');\n\nvar keydown = require('keydown');\n\nmodule.exports = function (options) {\n  options = extend({\n    key: '<shift>',\n    // true to make the brush mask visible/hidden on keydown\n    // by default the mask will be visible only when the `key`\n    // combination is pressed\n    toggle: false\n  }, options);\n  var brush = d3.svg.brush();\n  var kd = keydown(options.key);\n  var cachedInstance;\n  var visible = false;\n\n  function setBrushState(visible) {\n    var brushEl = cachedInstance.canvas.selectAll('.zoom-box');\n    brushEl.style('display', visible ? null : 'none');\n  }\n\n  function inner(instance) {\n    cachedInstance = instance; // update the brush scale with the instance scale\n\n    var oldDisableZoom;\n    brush.x(instance.meta.xScale).y(instance.meta.yScale).on('brushstart', function () {\n      if (!d3.event.sourceEvent) return;\n      oldDisableZoom = !!instance.options.disableZoom;\n      instance.options.disableZoom = true; // redrawing the canvas with the option disableZoom set to true\n\n      instance.draw();\n    }).on('brushend', function () {\n      if (!d3.event.sourceEvent) return;\n      instance.options.disableZoom = oldDisableZoom;\n\n      if (!brush.empty()) {\n        var lo = brush.extent()[0];\n        var hi = brush.extent()[1];\n        var x = [lo[0], hi[0]];\n        var y = [lo[1], hi[1]];\n        instance.programmaticZoom(x, y);\n      }\n\n      d3.select(this).transition().duration(1).call(brush.clear()).call(brush.event);\n    });\n    var brushEl = instance.canvas.append('g').attr('class', 'brush zoom-box');\n    brushEl.call(brush).call(brush.event);\n    instance.canvas.selectAll('.brush .extent').attr('stroke', '#fff').attr('fill-opacity', 0.125).attr('shape-rendering', 'crispEdges');\n    instance.canvas.on('mousemove.zoombox', function () {\n      // options.toggle sets the mask visibility when all the required\n      // are pressed once and it's not disabled on keyup\n      if (!options.toggle) {\n        inner.visible(pressed(options.key));\n      }\n    });\n    kd.on('pressed', function () {\n      inner.visible(options.toggle ? !inner.visible() : true);\n    });\n    inner.visible(false);\n  }\n\n  inner.visible = function (_) {\n    if (!arguments.length) {\n      return visible;\n    }\n\n    visible = _;\n    setBrushState(_);\n    return inner;\n  };\n\n  return inner;\n};","map":null,"metadata":{},"sourceType":"script"}