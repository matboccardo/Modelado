{"ast":null,"code":"'use strict';\n\nvar Parser = require('mr-parser').Parser;\n\nvar Interpreter = require('./Interpreter');\n\nvar extend = require('extend');\n\nfunction CodeGenerator(options, defs) {\n  this.statements = [];\n  this.defs = defs || {};\n  this.interpreter = new Interpreter(this, options);\n}\n\nCodeGenerator.prototype.setDefs = function (defs) {\n  this.defs = extend(this.defs, defs);\n  return this;\n};\n\nCodeGenerator.prototype.compile = function (namespace) {\n  if (!namespace || !(typeof namespace === 'object' || typeof namespace === 'function')) {\n    throw TypeError('namespace must be an object');\n  }\n\n  if (typeof namespace.factory !== 'function') {\n    throw TypeError('namespace.factory must be a function');\n  } // definitions available in the function\n  // each property under this.defs is mapped to local variables\n  // e.g\n  //\n  //  function (defs) {\n  //    var ns = defs['ns']\n  //    // code generated for the expression\n  //  }\n\n\n  this.defs.ns = namespace;\n  this.defs.$$mathCodegen = {\n    getProperty: function (symbol, scope, ns) {\n      if (symbol in scope) {\n        return scope[symbol];\n      }\n\n      if (symbol in ns) {\n        return ns[symbol];\n      }\n\n      throw SyntaxError('symbol \"' + symbol + '\" is undefined');\n    },\n    functionProxy: function (fn, name) {\n      if (typeof fn !== 'function') {\n        throw SyntaxError('symbol \"' + name + '\" must be a function');\n      }\n\n      return fn;\n    }\n  };\n\n  this.defs.$$processScope = this.defs.$$processScope || function () {};\n\n  var defsCode = Object.keys(this.defs).map(function (name) {\n    return 'var ' + name + ' = defs[\"' + name + '\"]';\n  }); // statement join\n\n  if (!this.statements.length) {\n    throw Error('there are no statements saved in this generator, make sure you parse an expression before compiling it');\n  } // last statement is always a return statement\n\n\n  this.statements[this.statements.length - 1] = 'return ' + this.statements[this.statements.length - 1];\n  var code = this.statements.join(';');\n  var factoryCode = defsCode.join('\\n') + '\\n' + ['return {', '  eval: function (scope) {', '    scope = scope || {}', '    $$processScope(scope)', '    ' + code, '  },', \"  code: '\" + code + \"'\", '}'].join('\\n');\n  /* eslint-disable */\n\n  var factory = new Function('defs', factoryCode);\n  return factory(this.defs);\n  /* eslint-enable */\n};\n\nCodeGenerator.prototype.parse = function (code) {\n  var self = this;\n  var program = new Parser().parse(code);\n  this.statements = program.blocks.map(function (statement) {\n    return self.interpreter.next(statement);\n  });\n  return this;\n};\n\nmodule.exports = CodeGenerator;","map":null,"metadata":{},"sourceType":"script"}