{"ast":null,"code":"var hasTypedArrays = false;\n\nif (typeof Float64Array !== \"undefined\") {\n  var DOUBLE_VIEW = new Float64Array(1),\n      UINT_VIEW = new Uint32Array(DOUBLE_VIEW.buffer);\n  DOUBLE_VIEW[0] = 1.0;\n  hasTypedArrays = true;\n\n  if (UINT_VIEW[1] === 0x3ff00000) {\n    //Use little endian\n    module.exports = function doubleBitsLE(n) {\n      DOUBLE_VIEW[0] = n;\n      return [UINT_VIEW[0], UINT_VIEW[1]];\n    };\n\n    function toDoubleLE(lo, hi) {\n      UINT_VIEW[0] = lo;\n      UINT_VIEW[1] = hi;\n      return DOUBLE_VIEW[0];\n    }\n\n    module.exports.pack = toDoubleLE;\n\n    function lowUintLE(n) {\n      DOUBLE_VIEW[0] = n;\n      return UINT_VIEW[0];\n    }\n\n    module.exports.lo = lowUintLE;\n\n    function highUintLE(n) {\n      DOUBLE_VIEW[0] = n;\n      return UINT_VIEW[1];\n    }\n\n    module.exports.hi = highUintLE;\n  } else if (UINT_VIEW[0] === 0x3ff00000) {\n    //Use big endian\n    module.exports = function doubleBitsBE(n) {\n      DOUBLE_VIEW[0] = n;\n      return [UINT_VIEW[1], UINT_VIEW[0]];\n    };\n\n    function toDoubleBE(lo, hi) {\n      UINT_VIEW[1] = lo;\n      UINT_VIEW[0] = hi;\n      return DOUBLE_VIEW[0];\n    }\n\n    module.exports.pack = toDoubleBE;\n\n    function lowUintBE(n) {\n      DOUBLE_VIEW[0] = n;\n      return UINT_VIEW[1];\n    }\n\n    module.exports.lo = lowUintBE;\n\n    function highUintBE(n) {\n      DOUBLE_VIEW[0] = n;\n      return UINT_VIEW[0];\n    }\n\n    module.exports.hi = highUintBE;\n  } else {\n    hasTypedArrays = false;\n  }\n}\n\nif (!hasTypedArrays) {\n  var buffer = new Buffer(8);\n\n  module.exports = function doubleBits(n) {\n    buffer.writeDoubleLE(n, 0, true);\n    return [buffer.readUInt32LE(0, true), buffer.readUInt32LE(4, true)];\n  };\n\n  function toDouble(lo, hi) {\n    buffer.writeUInt32LE(lo, 0, true);\n    buffer.writeUInt32LE(hi, 4, true);\n    return buffer.readDoubleLE(0, true);\n  }\n\n  module.exports.pack = toDouble;\n\n  function lowUint(n) {\n    buffer.writeDoubleLE(n, 0, true);\n    return buffer.readUInt32LE(0, true);\n  }\n\n  module.exports.lo = lowUint;\n\n  function highUint(n) {\n    buffer.writeDoubleLE(n, 0, true);\n    return buffer.readUInt32LE(4, true);\n  }\n\n  module.exports.hi = highUint;\n}\n\nmodule.exports.sign = function (n) {\n  return module.exports.hi(n) >>> 31;\n};\n\nmodule.exports.exponent = function (n) {\n  var b = module.exports.hi(n);\n  return (b << 1 >>> 21) - 1023;\n};\n\nmodule.exports.fraction = function (n) {\n  var lo = module.exports.lo(n);\n  var hi = module.exports.hi(n);\n  var b = hi & (1 << 20) - 1;\n\n  if (hi & 0x7ff00000) {\n    b += 1 << 20;\n  }\n\n  return [lo, b];\n};\n\nmodule.exports.denormalized = function (n) {\n  var hi = module.exports.hi(n);\n  return !(hi & 0x7ff00000);\n};","map":null,"metadata":{},"sourceType":"script"}