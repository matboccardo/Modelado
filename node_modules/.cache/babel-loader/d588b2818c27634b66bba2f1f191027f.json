{"ast":null,"code":"'use strict';\n\nmodule.exports = function () {\n  var math = Object.create(Math);\n\n  math.factory = function (a) {\n    if (typeof a !== 'number') {\n      throw new TypeError('built-in math factory only accepts numbers');\n    }\n\n    return Number(a);\n  };\n\n  math.add = function (a, b) {\n    return a + b;\n  };\n\n  math.sub = function (a, b) {\n    return a - b;\n  };\n\n  math.mul = function (a, b) {\n    return a * b;\n  };\n\n  math.div = function (a, b) {\n    return a / b;\n  };\n\n  math.mod = function (a, b) {\n    return a % b;\n  };\n\n  math.factorial = function (a) {\n    var res = 1;\n\n    for (var i = 2; i <= a; i += 1) {\n      res *= i;\n    }\n\n    return res;\n  }; // taken from https://github.com/josdejong/mathjs/blob/master/lib/function/arithmetic/nthRoot.js\n\n\n  math.nthRoot = function (a, root) {\n    var inv = root < 0;\n\n    if (inv) {\n      root = -root;\n    }\n\n    if (root === 0) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a < 0 && Math.abs(root) % 2 !== 1) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a === 0) {\n      return 0;\n    }\n\n    if (!isFinite(a)) {\n      return inv ? 0 : a;\n    }\n\n    var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a < 0 ? -x : x;\n    return inv ? 1 / x : x;\n  }; // logical\n\n\n  math.logicalOR = function (a, b) {\n    return a || b;\n  };\n\n  math.logicalXOR = function (a, b) {\n    /* eslint-disable */\n    return a != b;\n    /* eslint-enable*/\n  };\n\n  math.logicalAND = function (a, b) {\n    return a && b;\n  }; // bitwise\n\n\n  math.bitwiseOR = function (a, b) {\n    /* eslint-disable */\n    return a | b;\n    /* eslint-enable*/\n  };\n\n  math.bitwiseXOR = function (a, b) {\n    /* eslint-disable */\n    return a ^ b;\n    /* eslint-enable*/\n  };\n\n  math.bitwiseAND = function (a, b) {\n    /* eslint-disable */\n    return a & b;\n    /* eslint-enable*/\n  }; // relational\n\n\n  math.lessThan = function (a, b) {\n    return a < b;\n  };\n\n  math.lessEqualThan = function (a, b) {\n    return a <= b;\n  };\n\n  math.greaterThan = function (a, b) {\n    return a > b;\n  };\n\n  math.greaterEqualThan = function (a, b) {\n    return a >= b;\n  };\n\n  math.equal = function (a, b) {\n    /* eslint-disable */\n    return a == b;\n    /* eslint-enable*/\n  };\n\n  math.strictlyEqual = function (a, b) {\n    return a === b;\n  };\n\n  math.notEqual = function (a, b) {\n    /* eslint-disable */\n    return a != b;\n    /* eslint-enable*/\n  };\n\n  math.strictlyNotEqual = function (a, b) {\n    return a !== b;\n  }; // shift\n\n\n  math.shiftRight = function (a, b) {\n    return a >> b;\n  };\n\n  math.shiftLeft = function (a, b) {\n    return a << b;\n  };\n\n  math.unsignedRightShift = function (a, b) {\n    return a >>> b;\n  }; // unary\n\n\n  math.negative = function (a) {\n    return -a;\n  };\n\n  math.positive = function (a) {\n    return a;\n  };\n\n  return math;\n};","map":null,"metadata":{},"sourceType":"script"}