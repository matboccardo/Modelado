{"ast":null,"code":"/**\n * Created by mauricio on 3/29/15.\n */\n'use strict';\n\nvar d3 = window.d3;\n\nvar extend = require('extend');\n\nvar utils = require('./utils');\n\nvar clamp = require('clamp');\n\nvar globals = require('./globals');\n\nvar builtInEvaluator = require('./helpers/eval').builtIn;\n\nmodule.exports = function (config) {\n  config = extend({\n    xLine: false,\n    yLine: false,\n    renderer: function (x, y, index) {\n      return '(' + x.toFixed(3) + ', ' + y.toFixed(3) + ')';\n    },\n    owner: null\n  }, config);\n  var MARGIN = 20;\n  var line = d3.svg.line().x(function (d) {\n    return d[0];\n  }).y(function (d) {\n    return d[1];\n  });\n\n  function lineGenerator(el, data) {\n    return el.append('path').datum(data).attr('stroke', 'grey').attr('stroke-dasharray', '5,5').attr('opacity', 0.5).attr('d', line);\n  }\n\n  function tip(selection) {\n    var innerSelection = selection.selectAll('g.tip').data(function (d) {\n      return [d];\n    }); // enter\n\n    innerSelection.enter().append('g').attr('class', 'tip').attr('clip-path', 'url(#function-plot-clip-' + config.owner.id + ')'); // enter + update = enter inner tip\n\n    tip.el = innerSelection.selectAll('g.inner-tip').data(function (d) {\n      // debugger\n      return [d];\n    });\n    tip.el.enter().append('g').attr('class', 'inner-tip').style('display', 'none').each(function () {\n      var el = d3.select(this);\n      lineGenerator(el, [[0, -config.owner.meta.height - MARGIN], [0, config.owner.meta.height + MARGIN]]).attr('class', 'tip-x-line').style('display', 'none');\n      lineGenerator(el, [[-config.owner.meta.width - MARGIN, 0], [config.owner.meta.width + MARGIN, 0]]).attr('class', 'tip-y-line').style('display', 'none');\n      el.append('circle').attr('r', 3);\n      el.append('text').attr('transform', 'translate(5,-5)');\n    }); // enter + update\n\n    selection.selectAll('.tip-x-line').style('display', config.xLine ? null : 'none');\n    selection.selectAll('.tip-y-line').style('display', config.yLine ? null : 'none');\n  }\n\n  tip.move = function (coordinates) {\n    var i;\n    var minDist = Infinity;\n    var closestIndex = -1;\n    var x, y;\n    var el = tip.el;\n    var inf = 1e8;\n    var meta = config.owner.meta;\n    var data = el.data()[0].data;\n    var xScale = meta.xScale;\n    var yScale = meta.yScale;\n    var width = meta.width;\n    var height = meta.height;\n    var x0 = coordinates.x;\n    var y0 = coordinates.y;\n\n    for (i = 0; i < data.length; i += 1) {\n      // skipTip=true skips the evaluation in the datum\n      // implicit equations cannot be evaluated with a single point\n      // parametric equations cannot be evaluated with a single point\n      // polar equations cannot be evaluated with a single point\n      if (data[i].skipTip || data[i].fnType !== 'linear') {\n        continue;\n      }\n\n      var range = data[i].range || [-inf, inf];\n\n      if (x0 > range[0] - globals.TIP_X_EPS && x0 < range[1] + globals.TIP_X_EPS) {\n        try {\n          var candidateY = builtInEvaluator(data[i], 'fn', {\n            x: x0\n          });\n        } catch (e) {}\n\n        if (utils.isValidNumber(candidateY)) {\n          var tDist = Math.abs(candidateY - y0);\n\n          if (tDist < minDist) {\n            minDist = tDist;\n            closestIndex = i;\n          }\n        }\n      }\n    }\n\n    if (closestIndex !== -1) {\n      x = x0;\n\n      if (data[closestIndex].range) {\n        x = Math.max(x, data[closestIndex].range[0]);\n        x = Math.min(x, data[closestIndex].range[1]);\n      }\n\n      y = builtInEvaluator(data[closestIndex], 'fn', {\n        x: x\n      });\n      tip.show();\n      config.owner.emit('tip:update', x, y, closestIndex);\n      var clampX = clamp(x, xScale.invert(-MARGIN), xScale.invert(width + MARGIN));\n      var clampY = clamp(y, yScale.invert(height + MARGIN), yScale.invert(-MARGIN));\n      var color = utils.color(data[closestIndex], closestIndex);\n      el.attr('transform', 'translate(' + xScale(clampX) + ',' + yScale(clampY) + ')');\n      el.select('circle').attr('fill', color);\n      el.select('text').attr('fill', color).text(config.renderer(x, y, closestIndex));\n    } else {\n      tip.hide();\n    }\n  };\n\n  tip.show = function () {\n    this.el.style('display', null);\n  };\n\n  tip.hide = function () {\n    this.el.style('display', 'none');\n  }; // generations of getters/setters\n\n\n  Object.keys(config).forEach(function (option) {\n    utils.getterSetter.call(tip, config, option);\n  });\n  return tip;\n};","map":null,"metadata":{},"sourceType":"script"}