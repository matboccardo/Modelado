{"version":3,"sources":["components/PhaseDiagram.js","customHooks/index.js","components/Map.js","App.js","serviceWorker.js","index.js","helpers/helper.js"],"names":["functionPlot","require","PhaseDiagram","func","pValue","qValue","handleSetPoints","forkPoints","useMemo","findPoints","trajectoryTypes","uniqBy","phaseDiagramPoints","orderBy","uniq","testPoints","i","length","numberToTest","random","push","map","point","getNodeNameByPoint","p","round","evaluate","a","q","getSamplePointsOnEachRange","useState","activeClassId","setActiveClassId","renderUpdate","id","graph","shouldUpdate","setShouldUpdate","xPoint","setXPoint","useEffect","on","x","y","closePoint","filter","Math","abs","tip","move","useTwoPointsPrecision","svg","document","querySelector","removeChild","title","target","width","height","yAxis","domain","renderer","grid","data","fn","points","fnType","graphType","color","attr","r","annotations","text","className","key","Map","pointsTrajectoryFunction","getPoints","options","nerdamer","window","d3","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","appBar","marginBottom","App","classes","React","setFunc","setPoints","setP","setQ","inputA","inputB","inputC","inputD","values","setValues","handleChange","name","event","value","AppBar","position","Toolbar","Typography","variant","Button","onClick","Grid","container","justify","item","xs","style","display","fontSize","TextField","label","onChange","margin","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","algebrite","pow","expression","resolveFor","parseFloat","toDecimal","tryToSolve","toString","equation","Xequation","replace","parseInt","deg","eval","roots","nroots","tensor","elem","filterIrrational","d","e","console","log","number","includes","undefined"],"mappings":"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","file":"static/js/main.d0674e40.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { useTwoPointsPrecision } from '../customHooks';\nimport { getNodeNameByPoint, findPoints, evaluate } from '../helpers/helper';\nimport { uniqBy, round, uniq, orderBy, random } from 'loadsh';\nconst functionPlot = require(\"function-plot\");\n\nconst getSamplePointsOnEachRange = (forkPoints, pValue, qValue) => {\n  if(pValue && qValue){\n    let phaseDiagramPoints = orderBy(uniq(forkPoints));\n    let testPoints = [];\n    for(let i=0;i<phaseDiagramPoints.length;i++){\n      let numberToTest;\n      if(i===0){\n        numberToTest = random(phaseDiagramPoints[i] - 1,phaseDiagramPoints[i],true);\n        phaseDiagramPoints[i+1] ? \n          testPoints.push(random(phaseDiagramPoints[i],phaseDiagramPoints[i+1],true)): \n          testPoints.push(phaseDiagramPoints[i]+1); \n      }\n      else {\n        if(i === phaseDiagramPoints.length -1){\n          numberToTest = random(phaseDiagramPoints[i],phaseDiagramPoints[i] + 1,true);\n        }\n        else {\n          numberToTest = (phaseDiagramPoints[i] + phaseDiagramPoints[i+1]) / 2;\n        }\n      }\n      testPoints.push(numberToTest);\n      testPoints.push(phaseDiagramPoints[i]);\n    }\n    if(testPoints.length == 0){\n      testPoints.push(0);\n    }\n    testPoints = orderBy(testPoints);\n    return testPoints.map(point => \n      getNodeNameByPoint(\n      {\n        p: round(evaluate(pValue,{a: point}),10), \n        q: round(evaluate(qValue,{a: point}),10),\n      })\n    );\n  }\n  else {\n    return [];\n  }\n}\n\nconst PhaseDiagram = ({\n  func,\n  pValue,\n  qValue,\n  handleSetPoints,\n}) => {\n  const forkPoints = useMemo(() => findPoints(func, pValue, qValue), [func, pValue, qValue]);\n  const trajectoryTypes = useMemo(() => uniqBy(getSamplePointsOnEachRange(forkPoints, pValue, qValue),'id'), [forkPoints]);\n  const [activeClassId, setActiveClassId] = useState(0);\n  \n  const renderUpdate = (a) => {\n    const p = round(evaluate(pValue,{a:a}),10);\n    const q = round(evaluate(qValue,{a:a}),10);\n    handleSetPoints([p,q]);  \n    setActiveClassId(getNodeNameByPoint({p,q}).id);\n  }\n\n  const graph = useMemo(() => \n  {\n    if(pValue && qValue && func){\n      const svg = document.querySelector(\"#phase-diagram>svg\");\n      svg && document.querySelector(\"#phase-diagram\").removeChild(svg);\n      return functionPlot({\n            title: 'Diagrama de fases',\n            target: document.querySelector(\"#phase-diagram\"),\n            width: 900,\n            height: 400,\n            yAxis: { domain: [-5, 5] },\n            tip: {\n              renderer: renderUpdate,\n            },\n            grid: true,\n            data: [\n                {\n                    fn: '0 * x',\n                },\n                {\n                    points: forkPoints.map(point => [point,0]),\n                    fnType: 'points',\n                    graphType: 'scatter',\n                    color: 'black',\n                    attr: {\n                      r: 3,\n                    },\n                },\n            ],\n            annotations: forkPoints.map(p => (\n              {\n                x: p,\n                text: `a=${round(p,3)}`\n              })),\n      });\n    }\n    else {\n      return null;\n    }\n  },[pValue, qValue, forkPoints, func]);\n\n  useTwoPointsPrecision(graph, renderUpdate, forkPoints);\n  return (\n    <div id='phase-diagram'>\n      <div className='guide-container'>\n        {trajectoryTypes.map(x => \n          <div id={x.id} key={x.id} className={activeClassId === x.id && 'active'}>{x.text}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PhaseDiagram;","import { useState, useEffect } from 'react';\n\nexport const useTwoPointsPrecision = (graph, renderUpdate, forkPoints) => {\n    const [shouldUpdate, setShouldUpdate] = useState(false); \n    const [xPoint, setXPoint] = useState(null);\n    useEffect(() => {\n        if(graph){\n        graph.on(['mousemove'], ({x,y}) => {\n            if(!shouldUpdate){\n            const closePoint = forkPoints.filter(p => Math.abs(p-x) < 0.01);\n            if(closePoint.length > 0){\n                setXPoint(closePoint[0]);\n                setShouldUpdate(true);  \n            }\n            }\n        });  \n        }}\n    ,[graph]);\n\n    useEffect(() => {\n        if(shouldUpdate){\n            graph.tip.move({x: xPoint, y: 0});\n            renderUpdate(xPoint);\n            setShouldUpdate(false);  \n        }\n    },[shouldUpdate]);\n}","import React, { useEffect,useMemo } from 'react';\nimport { getPoints } from '../helpers/helper';\nconst functionPlot = require(\"function-plot\");\n\nconst Map = ({points, pValue, qValue}) => {\n    // puntos que construyen la function de la trayectorias\n    const pointsTrajectoryFunction = useMemo(() => getPoints(pValue,qValue) ,[qValue, pValue]);\n    const options = useMemo(() => ({\n        title: 'q = p^2/4',\n        yAxis: { domain: [-5, 5] },\n        width: 900,\n        height: 400,\n        grid: true,\n        data: [\n            {\n                fn: \"x^2/4\",\n            },\n            {\n                points: pointsTrajectoryFunction,\n                fnType: 'points',\n                graphType: 'polyline',\n            },\n            {\n                points: [0,0],\n                fnType: 'points',\n                graphType: 'scatter',\n            }\n        ]\n    }),[pointsTrajectoryFunction]);\n\n    useEffect(() => {\n        options.target = document.querySelector(\"#map\");\n        options.data[2] = {\n            points: points.length > 0 ? [points] : [0,0],\n            fnType: 'points',\n            graphType: 'scatter',\n            color: 'red',\n            attr: {\n                r: 3,\n            },\n        };\n        functionPlot(options);\n    },[points,options]);\n\n    return (\n        <div id=\"map\"/>\n    );\n};\n\nexport default Map;","import React from 'react';\nimport './App.css';\nimport * as d3 from 'd3';\nimport PhaseDiagram from './components/PhaseDiagram';\nimport Map from './components/Map';\nimport { AppBar, Toolbar, Typography, makeStyles, TextField, Button, Grid  } from '@material-ui/core';\nconst nerdamer = require('nerdamer/all');\n\nwindow.d3 = d3;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appBar:{\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [func, setFunc] = React.useState(null);\n  const [points, setPoints] = React.useState([]);\n  const [pValue, setP] = React.useState(null);\n  const [qValue, setQ] = React.useState(null);\n  const calculateFunction = () => {\n    const p = nerdamer(`simplify(-((${values.inputA}) + (${values.inputD})))`);\n    const q = nerdamer(`simplify((${values.inputA}) * (${values.inputD}) - (${values.inputB}) * (${values.inputC}))`); \n    setQ(q);\n    setP(p);\n    setFunc(nerdamer(`${q}-((${p})^2)/4`));\n  }\n\n  const [values, setValues] = React.useState(\n      {\n        inputA: '-1',\n        inputB: 'a',\n        inputC: '-1',\n        inputD: 'a + 1',\n      },\n  );\n\n  const handleChange = name => event => {\n    setValues({ ...values, [name]: event.target.value });\n  };\n\n  return (\n    <div className={classes.root} id=\"app\">\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h4\" className={classes.title}>\n            Sistema lineales 2D con escenarios(Acoplados)\n          </Typography>\n          <Button onClick={calculateFunction} variant=\"contained\">Calcular</Button>\n        </Toolbar>\n      </AppBar>\n      <Grid container justify=\"center\">\n          <Grid item xs={3}>\n            <div style={{display:'inline-block',fontSize: '128px'}}>A=(</div>\n          </Grid>\n          <Grid container item xs={4}> \n            <Grid item xs={6}>\n              <TextField\n                name=\"inputA\"\n                label=\"a\"\n                value={values.inputA}\n                onChange={handleChange('inputA')}\n                margin=\"normal\"\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                name=\"inputB\"\n                label=\"b\"\n                value={values.inputB}\n                onChange={handleChange('inputB')}\n                margin=\"normal\"\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                name=\"inputC\"\n                label=\"c\"\n                value={values.inputC}\n                onChange={handleChange('inputC')}\n                margin=\"normal\"\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                name=\"inputD\"\n                label=\"d\"\n                value={values.inputD}\n                onChange={handleChange('inputD')}\n                margin=\"normal\"\n              />\n            </Grid>\n        </Grid>\n          <Grid item xs={1}>\n            <div style={{display:'inline-block',fontSize: '128px'}}>)</div>\n          </Grid>\n          <Grid container item xs={4}>\n            {func &&\n              <>\n                <Grid item xs={12}>\n                  <Typography variant=\"h5\">{`q = ${qValue}`}</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography variant=\"h5\">{`p = ${pValue}`}</Typography>\n                </Grid>\n              </>\n            }\n          </Grid>\n          <Grid container>\n            <Grid item xs={6}>\n                {func && <Map \n                  points={points}\n                  qValue={qValue}\n                  pValue={pValue}\n                />} \n            </Grid>\n            <Grid item xs={6}>\n              <PhaseDiagram\n                handleSetPoints={setPoints}\n                func={func}\n                pValue={pValue}\n                qValue={qValue}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { round, uniqBy } from 'loadsh';\nconst nerdamer = require('nerdamer/all');\nvar algebrite = require('algebrite');\n\n// devuelve el nombre de la trayectoria dependiendo en p y q.\nexport const getNodeNameByPoint = (point) => {\n    const { p, q } = point;\n    if (q < 0){\n        return {text:'Silla', id:1};\n    }\n\n    if(q === 0 && p === 0){\n        return {text: 'Subte', id:2};\n    }\n\n    if(q === 0 && p > 0){\n        return {text: 'Infinitos puntos de equilibrio atractores', id:3};\n    }\n\n    if(q === 0 && p < 0){\n        return {text: 'Infinitos puntos de equilibrio repulsores', id:4};\n    }\n\n    if(q > 0 && p === 0){\n        return {text: 'Centro', id:5};\n    }\n\n    if(p > 0 && Math.abs(q - Math.pow(p,2)/4) < 0.00001){\n        return {text: 'Nodo atractor degenerado', id:6};\n    }\n\n    if(p < 0 && Math.abs(q - Math.pow(p,2)/4) < 0.00001){\n        return {text: 'Nodo repulsor degenerado', id:7};\n    }\n\n    if(p < 0 && q > round(Math.pow(p,2)/4,10)){\n        return {text: 'Foco repulsor', id:8};\n    }\n\n    if(p > 0 && q > round(Math.pow(p,2)/4,10)){\n        return {text: 'Foco atractor', id:9};\n    }\n\n    if(p > 0){\n        return {text: 'Nodos atractores', id:10};\n    }\n\n    if(p < 0){\n        return {text: 'Nodos repulsores', id:11};\n    }\n};\n\nexport const evaluate = (expression,resolveFor) => {\n    return parseFloat(nerdamer(expression).evaluate(resolveFor).toDecimal());\n} \n\n// devuelve los puntos en el mapa que realments nos importa\nexport const findPoints = (func, p, q) => {\n    if(!func || !p || !q) return [];\n    const points = [];\n    tryToSolve(func.toString()).map(x => points.push(x));\n    tryToSolve(q.toString())\n        .map(x => points.push(x));\n    tryToSolve(p.toString())\n        .filter(x => evaluate(q,{a:x}) >= 0)\n        .map(x => points.push(x));\n    return points;\n}\n\n// devuelve solo raizes reales\nconst tryToSolve = (equation) => {\n    try{\n        const Xequation = equation.replace(/a/g,'x');\n        switch (parseInt(algebrite.deg(Xequation).toString())){\n            //constante\n            case 0:\n                return [];\n            //polinomio de grado 1\n            case 1:\n                return [eval(algebrite.roots(Xequation).toString())];\n            //de mayor grado\n            default:\n                return uniqBy(algebrite.nroots(Xequation).tensor.elem.filter(filterIrrational).map(x => x.d));\n        }\n    }\n    catch(e) {\n        console.log(e);\n        return [];\n    }\n}\n\nconst filterIrrational = (number) => (\n    !number.toString().includes('i') ? number : undefined\n);\n\n// Generamos 200 puntos para dibujar la curva\nexport const getPoints = (pValue, qValue) => {\n    const points = [];\n    for(let i=-10;i<10;i=i+0.05){\n        let p = evaluate(pValue,{a:i});\n        let q = evaluate(qValue,{a:i});\n        points.push([p,q]);\n    }\n    return points;\n}"],"sourceRoot":""}